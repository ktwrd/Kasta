@using Kasta.Data.Models
@using Kasta.Web.Areas.Admin.Models.User
@using Kasta.Web.Helpers
@using Kasta.Web.Models.Components
@model UserDetailsViewModel

@{
    ViewData["Title"] = $"{Model.User.UserName} - User - Admin";
    ViewData["CurrentNavItem"] = "admin-user";
    Layout = "_Layout";
    var user = Model.User;
}

@await Component.InvokeAsync("Breadcrumb", new BreadcrumbViewComponentModel()
{
    new()
    {
        Text = "Admin"
    },
    new()
    {
        Text = "Users",
        Link = Url.Action("List", "User", new { area = "Admin" })
    },
    new()
    {
        Text = user.UserName ?? user.Id,
        Current = true
    }
})

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5>Storage Quota</h5>
            </div>
            <div class="card-body"
                 id="user-@(Model.User.Id)-storage-container"
                 hx-get='@Url.Action("EditUserLimitComponent", "User", new {area = "Admin", userId = user.Id})'
                 hx-trigger="revealed"
                 hx-swap="innerHTML"
                 hx-target="#user-@(Model.User.Id)-storage-container">
                    <span class="htmx-indicator spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                @* <form action='@Url.Action("EditUserPostForm", "User", new { area = "Admin", userId = user.Id })' method="post" enctype="multipart/form-data">
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "enableStorageQuota",
                            State = (user.Limit?.MaxStorage ?? -1) >= 0,
                            Name = nameof(EditUserContract.EnableStorageQuota),
                            Label = "Enable Storage Quota"
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormText", new FormTextComponentViewModel()
                        {
                            Id = "storageQuotaValue",
                            Value = (user.Limit?.MaxStorage ?? -1) >= 0 ? SizeHelper.BytesToString(user.Limit?.MaxStorage ?? 0) : "",
                            Name = nameof(EditUserContract.StorageQuotaValue),
                            DisplayName = "Storage Quota",
                            HelpText = "500KB, 500K, 512M, 5G, 1T, etc...\nWill be ignored when 'Enable Storage Quota' is unchecked."
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "enableUploadLimit",
                            State = (user.Limit?.MaxFileSize ?? -1) >= 0,
                            Name = nameof(EditUserContract.EnableUploadLimit),
                            Label = "Enable Upload Limit"
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormText", new FormTextComponentViewModel()
                        {
                            Id = "uploadLimitValue",
                            Value = (user.Limit?.MaxFileSize ?? -1) >= 0 ? SizeHelper.BytesToString(user.Limit?.MaxFileSize ?? 0) : "",
                            Name = nameof(EditUserContract.UploadLimitValue),
                            DisplayName = "Upload Limit",
                            HelpText = "500KB, 500K, 512M, 5G, 1T, etc...\nWill be ignored when 'Enable Upload Limit' is unchecked."
                        })
                    </div>
                    <hr/>
                    <button type="submit" class="btn btn-success">Save</button>
                </form> *@
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5>Roles</h5>
            </div>
            <div class="card-body"
                 id="user-@(Model.User.Id)-role-container"
                 hx-get='@Url.Action("EditUserRolesComponent", "User", new { area = "Admin", userId = user.Id })'
                 hx-trigger="revealed"
                 hx-swap="innerHTML"
                 hx-target="#user-@(Model.User.Id)-role-container">
                <span class="htmx-indicator spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>

                @* <form action='@Url.Action("EditUserRolesPostForm", "User", new { area = "Admin", userId = user.Id })' method="post" enctype="multipart/form-data">
                    <ul class="list-group">
                        @foreach (var (roleId, roleModel) in Model.Roles)
                        {
                            <li class="list-group-item">
                                @if (Model.UserRoles.ContainsKey(roleId))
                                {
                                    <input class="form-check-input me-1" id="user-@(user.Id)-role-check-@(roleId)" type="checkbox" name="@roleId" value="true" aria-label="@roleModel.Name" checked />
                                }
                                else
                                {
                                    <input class="form-check-input me-1" id="user-@(user.Id)-role-check-@(roleId)" type="checkbox" name="@roleId" value="true" aria-label="@roleModel.Name" />
                                }
                                @roleModel.Name
                            </li>
                        }
                    </ul>
                    <button type="submit" class="btn btn-success mt-3">Save</button>
                </form> *@
            </div>
        </div>
    </div>
</div>

