@using Kasta.Web.Helpers
@using Kasta.Web.Models.Admin
@using Kasta.Web.Models.Components
@model AdminIndexViewModel

@{
    ViewData["Title"] = "Admin";
    Layout = "_Layout";
}

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-auto">
                        <table class="table table-sm">
                            <tr>
                                <th>Users</th>
                                <th>Space Used</th>
                                <th>Files</th>
                                <th>Orphaned Files</th>
                            </tr>
                            <tr>
                                <td>@Model.UserCount</td>
                                <td>
                                    <span>@Model.TotalSpaceUsed</span>
                                    @if (Model.TotalPreviewSpaceUsed.ToUpper() != "0B")
                                    {
                                        <br/>
                                        <sup>Preview: @Model.TotalPreviewSpaceUsed</sup>
                                    }
                                </td>
                                <td>@Model.FileCount</td>
                                <td>@Model.OrphanFileCount</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm mt-3">
            <div class="card-header">
                System Settings
            </div>
            <div class="card-body">
                <form method="post" asp-controller="Admin" asp-action="SaveSystemSettings" enctype="multipart/form-data">

                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "enableUserRegister",
                            State = Model.SystemSettings.EnableUserRegister,
                            Name = nameof(Model.SystemSettings.EnableUserRegister),
                            Label = "Enable User Registrations"
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "enableUserRegister",
                            State = Model.SystemSettings.EnableEmbeds,
                            Name = nameof(Model.SystemSettings.EnableEmbeds),
                            Label = "Embed Media"
                        })
                    </div>
                    <hr/>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "enableCustomBranding",
                            State = Model.SystemSettings.EnableCustomBranding,
                            Name = nameof(Model.SystemSettings.EnableCustomBranding),
                            Label = "Enable Custom Branding"
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormText", new FormTextComponentViewModel()
                        {
                            Id = "customBrandTitle",
                            Value = Model.SystemSettings.CustomBrandingTitle,
                            Name = nameof(Model.SystemSettings.CustomBrandingTitle),
                            DisplayName = "App Name"
                        })
                    </div>
                    <hr/>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormCheckbox", new FormCheckboxComponentViewModel()
                        {
                            Id = "quotaEnable",
                            State = Model.SystemSettings.EnableQuota,
                            Name = nameof(Model.SystemSettings.EnableQuota),
                            Label = "Enable user quota (upload and storage)"
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormText", new FormTextComponentViewModel()
                        {
                            Id = "defaultUploadQuota",
                            Value = SizeHelper.BytesToString(Model.SystemSettings.DefaultUploadQuotaReal ?? 0),
                            Name = nameof(SystemSettingsParams.DefaultUploadQuota),
                            DisplayName = "Default User Upload Quota",
                            HelpText = "500KB, 500K, 512M, 5G, 1T, etc..."
                        })
                    </div>
                    <div class="mb-3 row">
                        @await Component.InvokeAsync("FormText", new FormTextComponentViewModel()
                        {
                            Id = "defaultStorageQuota",
                            Value = SizeHelper.BytesToString(Model.SystemSettings.DefaultStorageQuotaReal ?? 0),
                            Name = nameof(SystemSettingsParams.DefaultStorageQuota),
                            DisplayName = "Default User Storage Quota",
                            HelpText = "500KB, 500K, 512M, 5G, 1T, etc..."
                        })
                    </div>
                    <button class="btn btn-success mt-3" type="submit">Save</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4 mt-3">
        <div class="card shadow-sm">
            <div class="card-header">
                <i class="bi bi-cone-striped"></i>
                Maintenance
            </div>
            <div class="card-body">
                <a asp-controller="Admin" asp-action="RecalculateStorage" class="btn btn-primary">
                    Recalculate Storage Usage
                </a>
            </div>
        </div>
    </div>
</div>