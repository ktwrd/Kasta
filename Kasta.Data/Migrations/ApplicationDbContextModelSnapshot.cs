// <auto-generated />
using System;
using Kasta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Kasta.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kasta.Data.Models.Audit.AuditEntryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AuditId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditEntry", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.Audit.AuditModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Audit", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.ChunkUploadSessionModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("ChunkUploadSession", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.FileImageInfoModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("ColorSpace")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("CompressionLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("CompressionMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Height")
                        .HasColumnType("bigint");

                    b.Property<string>("Interlace")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MagickFormat")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Width")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FileImageInfo", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.FileModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("RelativeLocation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("S3FileInformationId")
                        .HasColumnType("character varying(36)");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Filename", "MimeType", "ShortUrl" });

                    b.Property<string>("ShortUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Filename");

                    b.HasIndex("MimeType");

                    b.HasIndex("S3FileInformationId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.FilePreviewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("RelativeLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FilePreview", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryFileAssociationModel", b =>
                {
                    b.Property<string>("GalleryId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("FileId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("GalleryId", "FileId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("GalleryFileAssociation", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Public");

                    b.ToTable("Gallery", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryTextHistoryModel", b =>
                {
                    b.Property<string>("GalleryId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("GalleryId", "Timestamp");

                    b.HasIndex("GalleryId")
                        .IsUnique();

                    b.HasIndex("Timestamp")
                        .IsDescending();

                    b.ToTable("GalleryTextHistory", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.PreferencesModel", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ValueKind")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Key");

                    b.ToTable("Preferences", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.S3FileChunkModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Sha256Hash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("S3FileChunk", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.S3FileInformationModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("ChunkSize")
                        .HasColumnType("integer");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("S3FileInformation", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.ShortLinkModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsVanity")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortLink")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ShortLink")
                        .IsUnique();

                    b.ToTable("ShortLinks", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.SystemMailboxMessageModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SystemMailboxMessage", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyHeaderMappingModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("TrustedProxyHeaderId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("TrustedProxyId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("TrustedProxyHeaderId");

                    b.HasIndex("TrustedProxyId");

                    b.ToTable("Config_TrustedProxyHeaderMapping", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyHeaderModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("HeaderName");

                    b.ToTable("Config_TrustedProxyHeader", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.ToTable("Config_TrustedProxy", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.UserApiKeyModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserApiKeys", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.UserLimitModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<long?>("MaxFileSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaxStorage")
                        .HasColumnType("bigint");

                    b.Property<long>("PreviewSpaceUsed")
                        .HasColumnType("bigint");

                    b.Property<long>("SpaceUsed")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("UserLimits", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.UserSettingModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("ShowFilePreviewInHome")
                        .HasColumnType("boolean");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Kasta.Data.Models.Audit.AuditEntryModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.Audit.AuditModel", "Audit")
                        .WithMany("Entries")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Kasta.Data.Models.Audit.AuditModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Kasta.Data.Models.ChunkUploadSessionModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kasta.Data.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kasta.Data.Models.FileImageInfoModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.FileModel", "File")
                        .WithOne("ImageInfo")
                        .HasForeignKey("Kasta.Data.Models.FileImageInfoModel", "Id");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Kasta.Data.Models.FileModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "CreatedByUser")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.FileModel", "CreatedByUserId");

                    b.HasOne("Kasta.Data.Models.S3FileInformationModel", "S3FileInformation")
                        .WithMany()
                        .HasForeignKey("S3FileInformationId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("S3FileInformation");
                });

            modelBuilder.Entity("Kasta.Data.Models.FilePreviewModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.FileModel", "File")
                        .WithOne("Preview")
                        .HasForeignKey("Kasta.Data.Models.FilePreviewModel", "Id");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryFileAssociationModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.FileModel", "File")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.Gallery.GalleryFileAssociationModel", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kasta.Data.Models.Gallery.GalleryModel", "Gallery")
                        .WithMany("FileAssociations")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "CreatedByUser")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.Gallery.GalleryModel", "CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryTextHistoryModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.Gallery.GalleryModel", "Gallery")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.Gallery.GalleryTextHistoryModel", "GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("Kasta.Data.Models.S3FileChunkModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.S3FileInformationModel", "S3FileInformation")
                        .WithMany("Chunks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("S3FileInformation");
                });

            modelBuilder.Entity("Kasta.Data.Models.S3FileInformationModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.FileModel", "File")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.S3FileInformationModel", "Id");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Kasta.Data.Models.ShortLinkModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "CreatedByUser")
                        .WithOne()
                        .HasForeignKey("Kasta.Data.Models.ShortLinkModel", "CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyHeaderMappingModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.TrustedProxyHeaderModel", "TrustedProxyHeader")
                        .WithMany("HeaderMappings")
                        .HasForeignKey("TrustedProxyHeaderId");

                    b.HasOne("Kasta.Data.Models.TrustedProxyModel", "TrustedProxy")
                        .WithMany("HeaderMappings")
                        .HasForeignKey("TrustedProxyId");

                    b.Navigation("TrustedProxy");

                    b.Navigation("TrustedProxyHeader");
                });

            modelBuilder.Entity("Kasta.Data.Models.UserApiKeyModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Kasta.Data.Models.UserModel", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kasta.Data.Models.UserLimitModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "User")
                        .WithOne("Limit")
                        .HasForeignKey("Kasta.Data.Models.UserLimitModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kasta.Data.Models.UserSettingModel", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", "User")
                        .WithOne("Settings")
                        .HasForeignKey("Kasta.Data.Models.UserSettingModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kasta.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kasta.Data.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kasta.Data.Models.Audit.AuditModel", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Kasta.Data.Models.FileModel", b =>
                {
                    b.Navigation("ImageInfo");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("Kasta.Data.Models.Gallery.GalleryModel", b =>
                {
                    b.Navigation("FileAssociations");
                });

            modelBuilder.Entity("Kasta.Data.Models.S3FileInformationModel", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyHeaderModel", b =>
                {
                    b.Navigation("HeaderMappings");
                });

            modelBuilder.Entity("Kasta.Data.Models.TrustedProxyModel", b =>
                {
                    b.Navigation("HeaderMappings");
                });

            modelBuilder.Entity("Kasta.Data.Models.UserModel", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Limit");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
